{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","board","points","gameOver","message","this","placeRandom","setState","blankCoordinates","r","length","c","push","startingNumbers","Math","floor","random","getEmptyCoordinates","randomCoordinate","randomNumber","randomStartingNumber","original","updated","JSON","stringify","direction","movedUp","moveUp","boardMoved","upWithRandom","checkForGameOver","movedRight","moveRight","rightWithRandom","movedDown","moveDown","downWithRandom","movedLeft","moveLeft","leftWithRandom","inputBoard","rotatedRight","rotateRight","row","current","unshift","rotateLeft","matrix","result","includes","mainBoard","document","querySelector","addEventListener","handleKeyDown","bind","e","keyCode","move","console","log","className","onClick","map","i","key","Component","Row","cell","cellValue","Cell","color","value","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ab87118.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: null,\n      points: 0,\n      gameOver: false,\n      message: null\n    }\n  }\n  mainBoard() {\n    let board = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n    board = this.placeRandom(this.placeRandom(board));\n    this.setState({ board, points: 0, gameOver: false, message: null });\n  }\n\n  getEmptyCoordinates(board) {\n    const blankCoordinates = [];\n\n    for (let r = 0; r < board.length; r++) {\n      for (let c = 0; c < board[r].length; c++) {\n        if (board[r][c] === 0) { blankCoordinates.push([r, c]) }\n      }\n    }\n\n    return blankCoordinates;\n  }\n  randomStartingNumber() {\n    const startingNumbers = [2, 4];\n    const randomNumber = startingNumbers[Math.floor(Math.random() * startingNumbers.length)];\n    return randomNumber;\n  }\n\n  placeRandom(board) {\n    const blankCoordinates = this.getEmptyCoordinates(board);\n    const randomCoordinate = blankCoordinates[Math.floor(Math.random() * blankCoordinates.length)];\n    const randomNumber = this.randomStartingNumber();\n    board[randomCoordinate[0]][randomCoordinate[1]] = randomNumber;\n    return board;\n  }\n\n  boardMoved(original, updated) {\n    return (JSON.stringify(updated) !== JSON.stringify(original)) ? true : false;\n  }\n\n  move(direction) {\n    if (!this.state.gameOver) {\n      if (direction === 'up') {\n        const movedUp = this.moveUp(this.state.board);\n        if (this.boardMoved(this.state.board, movedUp.board)) {\n          const upWithRandom = this.placeRandom(movedUp.board);\n\n          if (this.checkForGameOver(upWithRandom)) {\n            this.setState({ board: upWithRandom, gameOver: true, message: 'Game over!' });\n          } else {\n            this.setState({ board: upWithRandom, points: this.state.points += movedUp.points });\n          }\n        }\n      } else if (direction === 'right') {\n        const movedRight = this.moveRight(this.state.board);\n        if (this.boardMoved(this.state.board, movedRight.board)) {\n          const rightWithRandom = this.placeRandom(movedRight.board);\n\n          if (this.checkForGameOver(rightWithRandom)) {\n            this.setState({ board: rightWithRandom, gameOver: true, message: 'Game over!' });\n          } else {\n            this.setState({ board: rightWithRandom, points: this.state.points += movedRight.points });\n          }\n        }\n      } else if (direction === 'down') {\n        const movedDown = this.moveDown(this.state.board);\n        if (this.boardMoved(this.state.board, movedDown.board)) {\n          const downWithRandom = this.placeRandom(movedDown.board);\n\n          if (this.checkForGameOver(downWithRandom)) {\n            this.setState({ board: downWithRandom, gameOver: true, message: 'Game over!' });\n          } else {\n            this.setState({ board: downWithRandom, points: this.state.points += movedDown.points });\n          }\n        }\n      } else if (direction === 'left') {\n        const movedLeft = this.moveLeft(this.state.board);\n        if (this.boardMoved(this.state.board, movedLeft.board)) {\n          const leftWithRandom = this.placeRandom(movedLeft.board);\n\n          if (this.checkForGameOver(leftWithRandom)) {\n            this.setState({\n              board: leftWithRandom,\n              gameOver: true,\n              message: 'Game over!'\n            });\n          } else {\n            this.setState({ board: leftWithRandom, points: this.state.points += movedLeft.points });\n          }\n        }\n      }\n    } else {\n      this.setState({ message: 'Game over. Please start a new game.' });\n    }\n  }\n\n  moveUp(inputBoard) {\n    let rotatedRight = this.rotateRight(inputBoard);\n    let board = [];\n    let points = 0;\n\n    // Shift all numbers to the right\n    for (let r = 0; r < rotatedRight.length; r++) {\n      let row = [];\n      for (let c = 0; c < rotatedRight[r].length; c++) {\n        let current = rotatedRight[r][c];\n        (current === 0) ? row.unshift(current) : row.push(current);\n      }\n      board.push(row);\n    }\n    for (let r = 0; r < board.length; r++) {\n      for (let c = board[r].length - 1; c >= 0; c--) {\n        if (board[r][c] > 0 && board[r][c] === board[r][c - 1]) {\n          board[r][c] = board[r][c] * 2;\n          board[r][c - 1] = 0;\n          points += board[r][c];\n        } else if (board[r][c] === 0 && board[r][c - 1] > 0) {\n          board[r][c] = board[r][c - 1];\n          board[r][c - 1] = 0;\n        }\n      }\n    }\n\n    board = this.rotateLeft(board);\n\n    return { board, points };\n  }\n\n  moveRight(inputBoard) {\n    let board = [];\n    let points = 0;\n\n    for (let r = 0; r < inputBoard.length; r++) {\n      let row = [];\n      for (let c = 0; c < inputBoard[r].length; c++) {\n        let current = inputBoard[r][c];\n        (current === 0) ? row.unshift(current) : row.push(current);\n      }\n      board.push(row);\n    }\n\n    for (let r = 0; r < board.length; r++) {\n      for (let c = board[r].length - 1; c >= 0; c--) {\n        if (board[r][c] > 0 && board[r][c] === board[r][c - 1]) {\n          board[r][c] = board[r][c] * 2;\n          board[r][c - 1] = 0;\n          points += board[r][c];\n        } else if (board[r][c] === 0 && board[r][c - 1] > 0) {\n          board[r][c] = board[r][c - 1];\n          board[r][c - 1] = 0;\n        }\n      }\n    }\n\n    return { board, points };\n  }\n\n  moveDown(inputBoard) {\n    let rotatedRight = this.rotateRight(inputBoard);\n    let board = [];\n    let points = 0;\n\n    for (let r = 0; r < rotatedRight.length; r++) {\n      let row = [];\n      for (let c = rotatedRight[r].length - 1; c >= 0; c--) {\n        let current = rotatedRight[r][c];\n        (current === 0) ? row.push(current) : row.unshift(current);\n      }\n      board.push(row);\n    }\n\n    for (let r = 0; r < board.length; r++) {\n      for (let c = 0; c < board.length; c++) {\n        if (board[r][c] > 0 && board[r][c] === board[r][c + 1]) {\n          board[r][c] = board[r][c] * 2;\n          board[r][c + 1] = 0;\n          points += board[r][c];\n        } else if (board[r][c] === 0 && board[r][c + 1] > 0) {\n          board[r][c] = board[r][c + 1];\n          board[r][c + 1] = 0;\n        }\n      }\n    }\n\n    \n    board = this.rotateLeft(board);\n\n    return { board, points };\n  }\n\n  moveLeft(inputBoard) {\n    let board = [];\n    let points = 0;\n\n    for (let r = 0; r < inputBoard.length; r++) {\n      let row = [];\n      for (let c = inputBoard[r].length - 1; c >= 0; c--) {\n        let current = inputBoard[r][c];\n        (current === 0) ? row.push(current) : row.unshift(current);\n      }\n      board.push(row);\n    }\n\n    for (let r = 0; r < board.length; r++) {\n      for (let c = 0; c < board.length; c++) {\n        if (board[r][c] > 0 && board[r][c] === board[r][c + 1]) {\n          board[r][c] = board[r][c] * 2;\n          board[r][c + 1] = 0;\n          points += board[r][c];\n        } else if (board[r][c] === 0 && board[r][c + 1] > 0) {\n          board[r][c] = board[r][c + 1];\n          board[r][c + 1] = 0;\n        }\n      }\n    }\n\n    return { board, points };\n  }\n\n  rotateRight(matrix) {\n    let result = [];\n\n    for (let c = 0; c < matrix.length; c++) {\n      let row = [];\n      for (let r = matrix.length - 1; r >= 0; r--) {\n        row.push(matrix[r][c]);\n      }\n      result.push(row);\n    }\n\n    return result;\n  }\n\n  rotateLeft(matrix) {\n    let result = [];\n\n    for (let c = matrix.length - 1; c >= 0; c--) {\n      let row = [];\n      for (let r = matrix.length - 1; r >= 0; r--) {\n        row.unshift(matrix[r][c]);\n      }\n      result.push(row);\n    }\n\n    return result;\n  }\n  checkForGameOver(board) {\n    let moves = [\n      this.boardMoved(board, this.moveUp(board).board),\n      this.boardMoved(board, this.moveRight(board).board),\n      this.boardMoved(board, this.moveDown(board).board),\n      this.boardMoved(board, this.moveLeft(board).board)\n    ];\n\n    return (moves.includes(true)) ? false : true;\n  }\n  UNSAFE_componentWillMount() {\n    this.mainBoard();\n    const body = document.querySelector('body');\n    body.addEventListener('keydown', this.handleKeyDown.bind(this));\n  }\n\n  handleKeyDown(e) {\n    const up = 38;\n    const right = 39;\n    const down = 40;\n    const left = 37\n    const n = 78;\n\n    if (e.keyCode === up) {\n      this.move('up');\n    } else if (e.keyCode === right) {\n      this.move('right');\n    } else if (e.keyCode === down) {\n      this.move('down');\n    } else if (e.keyCode === left) {\n      this.move('left');\n    } else if (e.keyCode === n) {\n      this.mainBoard();\n    }\n  }\n  render() {\n    console.log('check kro', this.state.board);\n    return (\n      <div>\n        <div className=\"button\" onClick={() => { this.mainBoard() }}>New Game</div>\n          <div className=\"buttons\">\n          <div className=\"button\" onClick={() => { this.move('up') }}>Up</div>\n          <div className=\"button\" onClick={() => { this.move('right') }}>Right</div>\n          <div className=\"button\" onClick={() => { this.move('down') }}>Down</div>\n          <div className=\"button\" onClick={() => { this.move('left') }}>Left</div>\n        </div>\n        <div className=\"score\">points: {this.state.points}</div>\n\n        <table>\n          {this.state.board.map((row, i) => (<Row key={i} row={row} />))}\n        </table>\n\n        <p>{this.state.message}</p>\n      </div>\n    );\n\n  }\n};\nconst Row = ({ row }) => {\n  return (\n    <tr>\n      {row.map((cell, i) => (<Cell key={i} cellValue={cell} />))}\n    </tr>\n  );\n};\n\nconst Cell = ({ cellValue }) => {\n  let color = 'cell';\n  let value = (cellValue === 0) ? '' : cellValue;\n  if (value) {\n    color += ` color-${value}`;\n  }\n\n  return (\n    <td>\n      <div className={color}>\n        <div className=\"number\">{value}</div>\n      </div>\n    </td>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}