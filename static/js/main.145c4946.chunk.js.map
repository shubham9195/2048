{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","board","points","gameOver","message","i","row","j","push","this","placeRandom","setState","blankCoordinates","r","length","c","startingNumbers","Math","floor","random","getEmptyCoordinates","randomCoordinate","randomNumber","randomStartingNumber","console","log","original","updated","JSON","stringify","direction","existingBoard","check2048","movedUp","moveUp","boardMoved","upWithRandom","checkForGameOver","movedRight","moveRight","rightWithRandom","movedDown","moveDown","downWithRandom","movedLeft","moveLeft","leftWithRandom","inputBoard","rotatedRight","rotateRight","current","unshift","rotateLeft","matrix","result","includes","arr","search","some","mainBoard","document","querySelector","addEventListener","handleKeyDown","bind","e","keyCode","move","className","onClick","style","textAlign","map","key","Component","Row","cell","cellValue","Cell","color","value","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.145c4946.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: null,\n      points: 0,\n      gameOver: false,\n      message: null\n    }\n  }\n  //Creating the board//\n  mainBoard() {\n    let board = [];\n    let cr = 4 // this is for size of the board\n    for (let i = 0; i < cr; i++) {\n      const row = [];\n      for (let j = 0; j < cr; j++) {\n        row.push(0);\n      }\n      board.push(row);\n    }\n    board = this.placeRandom(this.placeRandom(board));\n    this.setState({ board, points: 0, gameOver: false, message: null });\n  }\n  // get all the empty coodinates from board\n  getEmptyCoordinates(board) {\n    const blankCoordinates = [];\n\n    for (let r = 0; r < board.length; r++) {\n      for (let c = 0; c < board[r].length; c++) {\n        if (board[r][c] === 0) {\n          blankCoordinates.push([r, c])\n        }\n      }\n    }\n\n    return blankCoordinates;\n  }\n\n  //Get Random Number \n\n  randomStartingNumber() {\n    const startingNumbers = [2, 4];\n    const randomNumber = startingNumbers[Math.floor(Math.random() * startingNumbers.length)];\n    return randomNumber;\n  }\n\n  // Place random starting number on an empty coordinates\n  placeRandom(board) {\n    const blankCoordinates = this.getEmptyCoordinates(board);\n    const randomCoordinate = blankCoordinates[Math.floor(Math.random() * blankCoordinates.length)];\n    const randomNumber = this.randomStartingNumber();\n    board[randomCoordinate[0]][randomCoordinate[1]] = randomNumber;\n    console.log('check randomplace number board', board);\n    return board;\n  }\n\n\n  boardMoved(original, updated) {\n    return (JSON.stringify(updated) !== JSON.stringify(original)) ? true : false;\n  }\n\n  move(direction) {\n    const existingBoard = this.state.board;\n    let winNumber= 2048// variable number for winning game\n    if (!this.state.gameOver && !(this.check2048(existingBoard,winNumber ))) {\n      if (direction === 'up') {\n        const movedUp = this.moveUp(existingBoard);\n        if (this.boardMoved(existingBoard, movedUp.board)) {\n          const upWithRandom = this.placeRandom(movedUp.board);\n          if (this.checkForGameOver(upWithRandom)) {\n            this.setState({ board: upWithRandom, gameOver: true, message: 'Game over!' });\n          } else {\n            this.setState({ board: upWithRandom, points: this.state.points += movedUp.points });\n          }\n        }\n      } else if (direction === 'right') {\n        const movedRight = this.moveRight(existingBoard);\n        if (this.boardMoved(existingBoard, movedRight.board)) {\n          const rightWithRandom = this.placeRandom(movedRight.board);\n\n          if (this.checkForGameOver(rightWithRandom)) {\n            this.setState({ board: rightWithRandom, gameOver: true, message: 'Game over!' });\n          } else {\n            this.setState({ board: rightWithRandom, points: this.state.points += movedRight.points });\n          }\n        }\n      } else if (direction === 'down') {\n        const movedDown = this.moveDown(existingBoard);\n        if (this.boardMoved(this.state.board, movedDown.board)) {\n          const downWithRandom = this.placeRandom(movedDown.board);\n\n          if (this.checkForGameOver(downWithRandom)) {\n            this.setState({ board: downWithRandom, gameOver: true, message: 'Game over!' });\n          } else {\n            this.setState({ board: downWithRandom, points: this.state.points += movedDown.points });\n          }\n        }\n      } else if (direction === 'left') {\n        const movedLeft = this.moveLeft(this.state.board);\n        if (this.boardMoved(existingBoard, movedLeft.board)) {\n          const leftWithRandom = this.placeRandom(movedLeft.board);\n\n          if (this.checkForGameOver(leftWithRandom)) {\n            this.setState({\n              board: leftWithRandom,\n              gameOver: true,\n              message: 'Game over!'\n            });\n          } else {\n            this.setState({ board: leftWithRandom, points: this.state.points += movedLeft.points });\n          }\n        }\n      }\n    } else if (this.check2048(existingBoard, 2048)) {\n      this.setState({ message: \"You Win\", gameOver: true })\n    } else {\n      this.setState({ message: 'Game over. Please start a new game.' });\n    }\n  }\n\n  moveUp(inputBoard) {\n    let rotatedRight = this.rotateRight(inputBoard);\n    let board = [];\n    let points = 0;\n\n    // Shift all numbers to the right\n    for (let r = 0; r < rotatedRight.length; r++) {\n      let row = [];\n      for (let c = 0; c < rotatedRight[r].length; c++) {\n        let current = rotatedRight[r][c];\n        (current === 0) ? row.unshift(current) : row.push(current);\n      }\n      board.push(row);\n    }\n\n    //add the number and shift to the right\n    for (let r = 0; r < board.length; r++) {\n      for (let c = board[r].length - 1; c >= 0; c--) {\n        if (board[r][c] > 0 && board[r][c] === board[r][c - 1]) {\n          board[r][c] = board[r][c] * 2;\n          board[r][c - 1] = 0;\n          points += board[r][c];\n        } else if (board[r][c] === 0 && board[r][c - 1] > 0) {\n          board[r][c] = board[r][c - 1];\n          board[r][c - 1] = 0;\n        }\n      }\n    }\n    // Rotate the board back upRight\n    board = this.rotateLeft(board);\n\n    return { board, points };\n  }\n\n  moveRight(inputBoard) {\n    let board = [];\n    let points = 0;\n\n    //shift all numbers to the right\n    for (let r = 0; r < inputBoard.length; r++) {\n      let row = [];\n      for (let c = 0; c < inputBoard[r].length; c++) {\n        let current = inputBoard[r][c];\n        (current === 0) ? row.unshift(current) : row.push(current);\n      }\n      board.push(row);\n    }\n    //add number and shift to right\n    for (let r = 0; r < board.length; r++) {\n      for (let c = board[r].length - 1; c >= 0; c--) {\n        if (board[r][c] > 0 && board[r][c] === board[r][c - 1]) {\n          board[r][c] = board[r][c] * 2;\n          board[r][c - 1] = 0;\n          points += board[r][c];\n        } else if (board[r][c] === 0 && board[r][c - 1] > 0) {\n          board[r][c] = board[r][c - 1];\n          board[r][c - 1] = 0;\n        }\n      }\n    }\n\n    return { board, points };\n  }\n\n  moveDown(inputBoard) {\n    let rotatedRight = this.rotateRight(inputBoard);\n    let board = [];\n    let points = 0;\n\n    //shift all number to the left\n    for (let r = 0; r < rotatedRight.length; r++) {\n      let row = [];\n      for (let c = rotatedRight[r].length - 1; c >= 0; c--) {\n        let current = rotatedRight[r][c];\n        (current === 0) ? row.push(current) : row.unshift(current);\n      }\n      board.push(row);\n    }\n    //add numbers and shift to left\n    for (let r = 0; r < board.length; r++) {\n      for (let c = 0; c < board.length; c++) {\n        if (board[r][c] > 0 && board[r][c] === board[r][c + 1]) {\n          board[r][c] = board[r][c] * 2;\n          board[r][c + 1] = 0;\n          points += board[r][c];\n        } else if (board[r][c] === 0 && board[r][c + 1] > 0) {\n          board[r][c] = board[r][c + 1];\n          board[r][c + 1] = 0;\n        }\n      }\n    }\n    // Rotate board back upRight\n    board = this.rotateLeft(board);\n\n    return { board, points };\n  }\n\n  moveLeft(inputBoard) {\n    let board = [];\n    let points = 0;\n    //shift all numbers to the left\n    for (let r = 0; r < inputBoard.length; r++) {\n      let row = [];\n      for (let c = inputBoard[r].length - 1; c >= 0; c--) {\n        let current = inputBoard[r][c];\n        (current === 0) ? row.push(current) : row.unshift(current);\n      }\n      board.push(row);\n    }\n    // add  number and shift to left\n    for (let r = 0; r < board.length; r++) {\n      for (let c = 0; c < board.length; c++) {\n        if (board[r][c] > 0 && board[r][c] === board[r][c + 1]) {\n          board[r][c] = board[r][c] * 2;\n          board[r][c + 1] = 0;\n          points += board[r][c];\n        } else if (board[r][c] === 0 && board[r][c + 1] > 0) {\n          board[r][c] = board[r][c + 1];\n          board[r][c + 1] = 0;\n        }\n      }\n    }\n    console.log('check board on move left', board);\n\n    return { board, points };\n  }\n\n  rotateRight(matrix) {\n    let result = [];\n\n    for (let c = 0; c < matrix.length; c++) {\n      let row = [];\n      for (let r = matrix.length - 1; r >= 0; r--) {\n        row.push(matrix[r][c]);\n      }\n      result.push(row);\n    }\n\n    return result;\n  }\n\n  rotateLeft(matrix) {\n    let result = [];\n\n    for (let c = matrix.length - 1; c >= 0; c--) {\n      let row = [];\n      for (let r = matrix.length - 1; r >= 0; r--) {\n        row.unshift(matrix[r][c]);\n      }\n      result.push(row);\n    }\n\n    return result;\n  }\n  // check to see if there are any moves left\n  checkForGameOver(board) {\n    let moves = [\n      this.boardMoved(board, this.moveUp(board).board),\n      this.boardMoved(board, this.moveRight(board).board),\n      this.boardMoved(board, this.moveDown(board).board),\n      this.boardMoved(board, this.moveLeft(board).board)\n    ];\n\n    return (moves.includes(true)) ? false : true;\n  }\n  //function to check for 2048 value\n  check2048(arr, search) {\n    return arr.some(row => row.includes(search))\n  }\n  UNSAFE_componentWillMount() {\n    this.mainBoard();\n    const body = document.querySelector('body');\n    body.addEventListener('keydown', this.handleKeyDown.bind(this));\n  }\n\n  handleKeyDown(e) {\n    const up = 38;\n    const right = 39;\n    const down = 40;\n    const left = 37\n    const n = 78;\n\n    if (e.keyCode === up) {\n      this.move('up');\n    } else if (e.keyCode === right) {\n      this.move('right');\n    } else if (e.keyCode === down) {\n      this.move('down');\n    } else if (e.keyCode === left) {\n      this.move('left');\n    } else if (e.keyCode === n) {\n      this.mainBoard();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>2048</h1>\n        <div className=\"button\" onClick={() => { this.mainBoard() }}>New Game</div>\n        <p>Use Arrow Keys to move and Press N for New Game</p>\n\n        <div className=\"score\">points: {this.state.points}</div>\n        <h2 style={{textAlign:'center'}}>{this.state.message}</h2>\n        <table>\n          <tbody>\n          {this.state.board.map((row, i) => (<Row key={i} row={row} />))}\n          </tbody>\n        </table>\n\n        \n      </div>\n    );\n\n  }\n};\nconst Row = ({ row }) => {\n  return (\n    <tr>\n      {row.map((cell, i) => (<Cell key={i} cellValue={cell} />))}\n    </tr>\n  );\n};\n\nconst Cell = ({ cellValue }) => {\n  let color = 'cell';\n  let value = (cellValue === 0) ? '' : cellValue;\n  if (value) {\n    color += ` color-${value}`;\n  }\n\n  return (\n    <td>\n      <div className={color}>\n        <div className=\"number\">{value}</div>\n      </div>\n    </td>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}